A quick little set of methods for SCALE depletion - avoids using built in TRITON process.


HOW IT WORKS

1 - Runs TRITON for 1 step and kills it afterwards.
2 - Does a predictor step in ORIGEN to t+dt using fluxes, power defs, and the f33 from the first step.
3 - Runs TRITON at t+dt with the new nuclide vector from the EOS at Step 2 - again kills after completing step 0.
4 - Corrector method in Origen using modified f33

BASE FILES
f71_to_comp.sh
baseOrigenFile.inp
triton_base.inp

getComps.py
jupyterToPythonFile.py
makeAndRunOrigen.py
runAndKillScale.py

=====================
OPTIONS FOR DEPLETION
=====================

=====================
CELI
Constant Extrapolator Linear Interpolator
How it works:
  Get A0 at t0 using MC
  Constant extrapolator step: Use A0 to deplete from t0 to t1 - get N1
  Get A1 at t1 using MC
  Linear interpolator step: Deplete from t0 to t1 using a linear interpolator between on t0, t1, A0, A1 (based on number of 'substeps')
  Go to next timestep.

How it works using relaxation factors:
  Get A0 at t0 using MC
  Constant extrapolator step: Use A0 to deplete from t0 to t1 - get N1
  Get A1_0 at t1 using MC
  For every iteration k; k=0; k++:
    Linear interpolator step: Deplete from t0 to t1 using a linear interpolator between on t0, t1, A0, A1_k (based on number of 'substeps') = get N1_k+1
  Averaging step: N_1 =
  Go to next timestep.

Variables:
  origen_predictor_divs - this variable controls the number of divisions in the origen calculation. For CRAM methodology typically the accuracy is not strongly dependent on the number of divisions so using a low number - 1 or 2 is rather fine.
  origen_LI_divs - this is the number of substeps we perform - e.g. how often A0 is interpolated during the
  relaxation - boolean whether to use relaxation and iteration
  relaxation_steps - number of steps to use in the scheme
  relaxation_factor - this is the constant relaxation factor when iterating the linear interpolator

For more information see:
A simple implicit coupling scheme for Monte Carlo neutronics and isotopic depletion
=====================

=====================
CEBM
=====================

=====================
CEPE - extremely unstable and still in the works of being developed/worked on
=====================

=====================
Literature
=====================
A simple implicit coupling scheme for Monte Carlo neutronics and isotopic depletion

Performance upgrades to the MCNP6 burnup capability for large scale
depletion calculations

Practical techniques for large-scale Monte Carlo reactor depletion calculatons

Flux renormalization in constant power burnup calculations

SCALE Manual - Triton

Preventing xenon oscillations in Monte Carlo burnup calculations by forcing equilibrium (ppt)

Comparison of Neutronics-Depletion Coupling
Schemes for Burnup Calculations–Continued Study

Numerical Stability of Existing Monte Carlo Burnup
Codes in Cycle Calculations of Critical Reactors

INLINE THERMAL AND XENON FEEDBACK ITERATIONS
IN MONTE CARLO REACTOR CALCULATIONS

Development and Analysis of High Order
Neutron Transport–Depletion Coupling
Algorithms

Burnup calculation methodology in Serpent

See Kotlyar et al. and anything with Kotlyar + Schwagerus, especially SIMP scheme and ppts on stochastic predictor+corrector

A personal favorite for the ill informed artist:
Why We Use Bad Color Maps and What You Can Do About It
